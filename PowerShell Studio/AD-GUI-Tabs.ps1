#------------------------------------------------------------------------
# Source File Information (DO NOT MODIFY)
# Source ID: 09276ae2-fa04-4a07-9e22-935559956eaf
# Source File: ActiveDirectoryGUI.psf
#------------------------------------------------------------------------
#region File Recovery Data (DO NOT MODIFY)
<#RecoveryData:
MQcAAB+LCAAAAAAABABlVUfL64gO3QfyHy6zNYy7HcM3F9xr3PvOce/djvPrJ+++zYOnlRCSEDrS
OT92no5HvlxcsiW/vs5aj8M/f6F/w3/9vt9+/foxlrqsh6QT6i7Xkz7/TadbfeRcveTpNi6X6Ml/
T2vxA/5f4p9yYVz634GqRnCcngEL0TRrcCz9X2Norgu67cCa0is6agJbw3u/+bmS6Gl8J1OVd8aW
QYY6oQb2KNsYmhFlxtIn7lL3GxVu12hBlfDZPV3Xfd7RSgzVH8cKDtFRtARwFqtsoaDJStOE8Bw+
ReZDncwOJukqltA3Gsb1cRCy9r7f7KLJIV0Bkr5CTw6R9iTPRvwFwhQjOtccSDyeBfRkJLzx0sTC
WwuCpZxvJzOD4B1wly3cRMv40ATa3G9lQuCxLCYFoDyqGY9TrEikZzHJQKR+5npgkKQebdOQRlHL
HPvcKntNKl6NkJRZ+gfP7RCsP5+PJCDE+00YB+ATfKzqnY+zz/Q2A5/vzMWF0yPwma0yf96sWVgK
PZfOTFbfFMm2ILNh0ZGNMQWOOT6ijNdkjTvcbxwIfhzXxDLXgMQn/nqO2yNHGcvLPI/Vij5PuX3f
VTXwnJIuFuspPJlPoUHrB1Nqp7Myxo06AtNdcDq/sz1Or7UZaqRM66MQT1qfXZ2EPL/SL+5MJWfi
YhlYFDTicEcVTGRHPDuImS3jR8WVq21HsO+EFmGzX0wnw6pPYYyE9vrIV+Bw8BBsK9yiCUnrJ7hL
IqUQgrOq8ekSiMSrhi6HC8FTTK/moQoIsoozRKFoAv253xhXiBHP964MDcAFQxpYD3soiHYRV06b
AUZqE15z5ColCC7zm3/TbOVGzbDYdahbQPwUVc0GXaWRZfB+u06kjCvMMuPnc4HE0eZfDCxG1Is7
MBvksqwfFVwZK4EKIyIBt4GDMnNDyuFAFSQt0qEigudmGiuMK/fbasG2PRisIcHeiD41M7MNDsLx
7InJBeHRi+umhfScLJTceQQTe7ttTGrm5yksiTjV9E12rBdjr/Me3G+R832vfBd7l7dxHtwRKTUW
mjRcH4iNujBV0Vso1gHjIEeKyBCjtDNnNtWs9g00ZrDQpjfxWtidB8R+98YNZWFJQ1HhkB7wiyDZ
IqBakI9oumGcjukAmq9Y6Tm3BgMfrM25FzNgrNUXDPsQ8NXs4XiQKTekmPuNRAy7RfaJ8lonYreF
2jzV2B5gW8ropSeH1kELk5ynNG0AyaeS6hVtIyb95xguU13Kujn2gj31kUCS+00DjHl+1OFa+kkU
bgGAnjEFfI4Af5Fn6BVOL0sobOxXiHRd5gailwqObyMH0ZhszIDqWjOs2uysUcX3WxyiZmk4xvSQ
S57AhetyM+CzymyXP0gqQkAPHrLnAcXXQ+z0pifaTtoWQnlAErMrYzfMjhZ+CjxU+G83ycRYeWMu
2z1t4XippL94XD3gBbH2/uzC3QKrA4flGPuaVVhPglotKTELaT17AB9LoKHjva/EOi7EF9OTyV8l
eaGj8vpij1Tc0sMJ6TlnJAPOBJdr578GkX4BpG2uAzoaxCvCi3K79C+ZGm6A+7XiZzCi+sl0v6Ep
wi/amCY4CCyopW7CiYEG5ET+GuBCWRdcHGk+BzsdPx9uKE+wXUYKrRJQvanHQT6/cciSx2p6W/db
coVb4SVNEG4WtTUnG5xeBgDBox3LfEVdpB4rtaNopdrGdzCey3I6FacaXj+bnjnsz0i0onqNYPg/
bGk9ru0NQNJmH696JuV2yqge8VqU0fIGSlDSLZEjo3QbwT4ZIJ2ouG/o9wZa4EgLSqF2H+kz2vHy
MTDuN6TQAFxYAvItNyyCOe3DAA0yiSJytxsVeqdcVBy5AC6fDWX8cvsK0T8/4B+h+iNZ9Lrm/aur
8/UX+I38gP8rkb//Bfd7kq8xBwAA#>
#endregion

<#
    .NOTES
    --------------------------------------------------------------------------------
     Code generated by:  SAPIEN Technologies, Inc., PowerShell Studio 2020 v5.7.172
     Generated on:       7/14/2020 3:07 PM
     Generated by:       Administrator
    --------------------------------------------------------------------------------
    .DESCRIPTION
        GUI script generated by PowerShell Studio 2020
#>


#----------------------------------------------
#region Application Functions
#----------------------------------------------

#endregion Application Functions

#----------------------------------------------
# Generated Form Function
#----------------------------------------------
function Show-ActiveDirectoryGUI_psf {

	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	#endregion Import Assemblies

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$form1 = New-Object 'System.Windows.Forms.Form'
	$TabSearch = New-Object 'System.Windows.Forms.TabControl'
	$tabpage1 = New-Object 'System.Windows.Forms.TabPage'
	$buttonSetPwd = New-Object 'System.Windows.Forms.Button'
	$TextSetPwd = New-Object 'System.Windows.Forms.TextBox'
	$buttonUnlock = New-Object 'System.Windows.Forms.Button'
	$Data = New-Object 'System.Windows.Forms.DataGridView'
	$ButtonSearch = New-Object 'System.Windows.Forms.Button'
	$TextUser = New-Object 'System.Windows.Forms.TextBox'
	$TabCreate = New-Object 'System.Windows.Forms.TabPage'
	$buttonCreateUser = New-Object 'System.Windows.Forms.Button'
	$LabelLastName = New-Object 'System.Windows.Forms.Label'
	$labelEnterPassword = New-Object 'System.Windows.Forms.Label'
	$labelEnterID = New-Object 'System.Windows.Forms.Label'
	$LabelFirstName = New-Object 'System.Windows.Forms.Label'
	$TextID = New-Object 'System.Windows.Forms.TextBox'
	$TextFirstName = New-Object 'System.Windows.Forms.TextBox'
	$TextPassword = New-Object 'System.Windows.Forms.TextBox'
	$TextLastName = New-Object 'System.Windows.Forms.TextBox'
	$UserName = New-Object 'System.Windows.Forms.DataGridViewTextBoxColumn'
	$UPN = New-Object 'System.Windows.Forms.DataGridViewTextBoxColumn'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	
	$form1_Load={
		#TODO: Initialize Form Controls here
		
	}
	
	#region Control Helper Functions
	function Update-DataGridView
	{
		<#
		.SYNOPSIS
			This functions helps you load items into a DataGridView.
	
		.DESCRIPTION
			Use this function to dynamically load items into the DataGridView control.
	
		.PARAMETER  DataGridView
			The DataGridView control you want to add items to.
	
		.PARAMETER  Item
			The object or objects you wish to load into the DataGridView's items collection.
		
		.PARAMETER  DataMember
			Sets the name of the list or table in the data source for which the DataGridView is displaying data.
	
		.PARAMETER AutoSizeColumns
		    Resizes DataGridView control's columns after loading the items.
		#>
		Param (
			[ValidateNotNull()]
			[Parameter(Mandatory=$true)]
			[System.Windows.Forms.DataGridView]$DataGridView,
			[ValidateNotNull()]
			[Parameter(Mandatory=$true)]
			$Item,
		    [Parameter(Mandatory=$false)]
			[string]$DataMember,
			[System.Windows.Forms.DataGridViewAutoSizeColumnsMode]$AutoSizeColumns = 'None'
		)
		$DataGridView.SuspendLayout()
		$DataGridView.DataMember = $DataMember
		
		if ($null -eq $Item)
		{
			$DataGridView.DataSource = $null
		}
		elseif ($Item -is [System.Data.DataSet] -and $Item.Tables.Count -gt 0)
		{
			$DataGridView.DataSource = $Item.Tables[0]
		}
		elseif ($Item -is [System.ComponentModel.IListSource]`
		-or $Item -is [System.ComponentModel.IBindingList] -or $Item -is [System.ComponentModel.IBindingListView] )
		{
			$DataGridView.DataSource = $Item
		}
		else
		{
			$array = New-Object System.Collections.ArrayList
			
			if ($Item -is [System.Collections.IList])
			{
				$array.AddRange($Item)
			}
			else
			{
				$array.Add($Item)
			}
			$DataGridView.DataSource = $array
		}
		
		if ($AutoSizeColumns -ne 'None')
		{
			$DataGridView.AutoResizeColumns($AutoSizeColumns)
		}
		
		$DataGridView.ResumeLayout()
	}
	
	function ConvertTo-DataTable
	{
		<#
			.SYNOPSIS
				Converts objects into a DataTable.
		
			.DESCRIPTION
				Converts objects into a DataTable, which are used for DataBinding.
		
			.PARAMETER  InputObject
				The input to convert into a DataTable.
		
			.PARAMETER  Table
				The DataTable you wish to load the input into.
		
			.PARAMETER RetainColumns
				This switch tells the function to keep the DataTable's existing columns.
			
			.PARAMETER FilterWMIProperties
				This switch removes WMI properties that start with an underline.
		
			.EXAMPLE
				$DataTable = ConvertTo-DataTable -InputObject (Get-Process)
		#>
		[OutputType([System.Data.DataTable])]
		param(
		$InputObject, 
		[ValidateNotNull()]
		[System.Data.DataTable]$Table,
		[switch]$RetainColumns,
		[switch]$FilterWMIProperties)
		
		if($null -eq $Table)
		{
			$Table = New-Object System.Data.DataTable
		}
		
		if ($null -eq $InputObject)
		{
			$Table.Clear()
			return @( ,$Table)
		}
		
		if ($InputObject -is [System.Data.DataTable])
		{
			$Table = $InputObject
		}
		elseif ($InputObject -is [System.Data.DataSet] -and $InputObject.Tables.Count -gt 0)
		{
			$Table = $InputObject.Tables[0]
		}
		else
		{
			if (-not $RetainColumns -or $Table.Columns.Count -eq 0)
			{
				#Clear out the Table Contents
				$Table.Clear()
				
				if ($null -eq $InputObject) { return } #Empty Data
				
				$object = $null
				#find the first non null value
				foreach ($item in $InputObject)
				{
					if ($null -ne $item)
					{
						$object = $item
						break
					}
				}
				
				if ($null -eq $object) { return } #All null then empty
				
				#Get all the properties in order to create the columns
				foreach ($prop in $object.PSObject.Get_Properties())
				{
					if (-not $FilterWMIProperties -or -not $prop.Name.StartsWith('__')) #filter out WMI properties
					{
						#Get the type from the Definition string
						$type = $null
						
						if ($null -ne $prop.Value)
						{
							try { $type = $prop.Value.GetType() }
							catch { Out-Null }
						}
						
						if ($null -ne $type) # -and [System.Type]::GetTypeCode($type) -ne 'Object')
						{
							[void]$table.Columns.Add($prop.Name, $type)
						}
						else #Type info not found
						{
							[void]$table.Columns.Add($prop.Name)
						}
					}
				}
				
				if ($object -is [System.Data.DataRow])
				{
					foreach ($item in $InputObject)
					{
						$Table.Rows.Add($item)
					}
					return @( ,$Table)
				}
			}
			else
			{
				$Table.Rows.Clear()
			}
			
			foreach ($item in $InputObject)
			{
				$row = $table.NewRow()
				
				if ($item)
				{
					foreach ($prop in $item.PSObject.Get_Properties())
					{
						if ($table.Columns.Contains($prop.Name))
						{
							$row.Item($prop.Name) = $prop.Value
						}
					}
				}
				[void]$table.Rows.Add($row)
			}
		}
		
		return @(,$Table)
	}
	#endregion
	
	$ButtonSearch_Click={
		#TODO: Place custom script here
		$Data.Rows.Clear()
		$TextUser = $TextUser.Text
		$Users = Get-ADUser -Filter "SamAccountName -like '$TextUser'"
		$Users | ForEach-Object {
			$Data.Rows.Add($_.SamAccountName,$_.UserPrincipalName)
			
		}
	}
	
	$buttonCreateUser_Click={
		#TODO: Place custom script here
		$TextFirstName = $TextFirstName.Text
		$TextLastName = $TextLastName.Text
		$TextPassword = $TextPassword.Text
		$TextPassword = ConvertTo-SecureString $TextPassword -AsPlainText -Force
		$SamAccountName = $TextFirstName + $TextLastName[0]
		$DisplayName = $TextFirstName + " " + $TextLastName
		$TextID = $TextID.Text
		New-ADUser -GivenName $TextFirstName -Surname $TextLastName -DisplayName $DisplayName -Name $DisplayName `
				   -AccountPassword $TextPassword  -SamAccountName $SamAccountName -UserPrincipalName $TextID@Arelion.com `
					-Enabled $true
		
	}
	
	$buttonUnlock_Click={
		#TODO: Place custom script here
		#$TextUser=$TextUser.Text
		Unlock-ADAccount -Identity $TextUser.Text -Confirm 
	}
	
	$buttonSetPwd_Click={
		#TODO: Place custom script here
		$TextSetPwd = ConvertTo-SecureString $TextSetPwd -AsPlainText -Force
		Set-ADAccountPassword -Identity $TextUser.Text -NewPassword $TextSetPwd -Confirm
		
	}
	
	# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$form1.WindowState = $InitialFormWindowState
	}
	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$buttonSetPwd.remove_Click($buttonSetPwd_Click)
			$buttonUnlock.remove_Click($buttonUnlock_Click)
			$ButtonSearch.remove_Click($ButtonSearch_Click)
			$buttonCreateUser.remove_Click($buttonCreateUser_Click)
			$form1.remove_Load($form1_Load)
			$form1.remove_Load($Form_StateCorrection_Load)
			$form1.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch { Out-Null <# Prevent PSScriptAnalyzer warning #> }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$form1.SuspendLayout()
	$TabSearch.SuspendLayout()
	$tabpage1.SuspendLayout()
	$TabCreate.SuspendLayout()
	#
	# form1
	#
	$form1.Controls.Add($TabSearch)
	$form1.AutoScaleDimensions = '6, 13'
	$form1.AutoScaleMode = 'Font'
	$form1.ClientSize = '439, 400'
	$form1.Name = 'form1'
	$form1.Text = 'Form'
	$form1.add_Load($form1_Load)
	#
	# TabSearch
	#
	$TabSearch.Controls.Add($tabpage1)
	$TabSearch.Controls.Add($TabCreate)
	$TabSearch.Location = '13, 13'
	$TabSearch.Name = 'TabSearch'
	$TabSearch.SelectedIndex = 0
	$TabSearch.Size = '414, 360'
	$TabSearch.TabIndex = 0
	#
	# tabpage1
	#
	$tabpage1.Controls.Add($buttonSetPwd)
	$tabpage1.Controls.Add($TextSetPwd)
	$tabpage1.Controls.Add($buttonUnlock)
	$tabpage1.Controls.Add($Data)
	$tabpage1.Controls.Add($ButtonSearch)
	$tabpage1.Controls.Add($TextUser)
	$tabpage1.Location = '4, 22'
	$tabpage1.Name = 'tabpage1'
	$tabpage1.Padding = '3, 3, 3, 3'
	$tabpage1.Size = '406, 334'
	$tabpage1.TabIndex = 0
	$tabpage1.Text = 'Search'
	$tabpage1.UseVisualStyleBackColor = $True
	#
	# buttonSetPwd
	#
	$buttonSetPwd.Location = '113, 38'
	$buttonSetPwd.Name = 'buttonSetPwd'
	$buttonSetPwd.Size = '155, 23'
	$buttonSetPwd.TabIndex = 5
	$buttonSetPwd.Text = 'Set Password'
	$buttonSetPwd.UseCompatibleTextRendering = $True
	$buttonSetPwd.UseVisualStyleBackColor = $True
	$buttonSetPwd.add_Click($buttonSetPwd_Click)
	#
	# TextSetPwd
	#
	$TextSetPwd.Location = '7, 41'
	$TextSetPwd.Name = 'TextSetPwd'
	$TextSetPwd.PasswordChar = '*'
	$TextSetPwd.Size = '100, 20'
	$TextSetPwd.TabIndex = 4
	#
	# buttonUnlock
	#
	$buttonUnlock.Location = '193, 3'
	$buttonUnlock.Name = 'buttonUnlock'
	$buttonUnlock.Size = '75, 23'
	$buttonUnlock.TabIndex = 3
	$buttonUnlock.Text = 'Unlock'
	$buttonUnlock.UseCompatibleTextRendering = $True
	$buttonUnlock.UseVisualStyleBackColor = $True
	$buttonUnlock.add_Click($buttonUnlock_Click)
	#
	# Data
	#
	$Data.AllowUserToAddRows = $False
	$Data.AllowUserToDeleteRows = $False
	$Data.ColumnHeadersHeightSizeMode = 'AutoSize'
	[void]$Data.Columns.Add($UserName)
	[void]$Data.Columns.Add($UPN)
	$Data.Location = '7, 78'
	$Data.Name = 'Data'
	$Data.ReadOnly = $True
	$Data.Size = '393, 193'
	$Data.TabIndex = 2
	#
	# ButtonSearch
	#
	$ButtonSearch.Location = '112, 3'
	$ButtonSearch.Name = 'ButtonSearch'
	$ButtonSearch.Size = '75, 23'
	$ButtonSearch.TabIndex = 1
	$ButtonSearch.Text = 'Search'
	$ButtonSearch.UseCompatibleTextRendering = $True
	$ButtonSearch.UseVisualStyleBackColor = $True
	$ButtonSearch.add_Click($ButtonSearch_Click)
	#
	# TextUser
	#
	$TextUser.Location = '6, 6'
	$TextUser.Name = 'TextUser'
	$TextUser.Size = '100, 20'
	$TextUser.TabIndex = 0
	#
	# TabCreate
	#
	$TabCreate.Controls.Add($buttonCreateUser)
	$TabCreate.Controls.Add($LabelLastName)
	$TabCreate.Controls.Add($labelEnterPassword)
	$TabCreate.Controls.Add($labelEnterID)
	$TabCreate.Controls.Add($LabelFirstName)
	$TabCreate.Controls.Add($TextID)
	$TabCreate.Controls.Add($TextFirstName)
	$TabCreate.Controls.Add($TextPassword)
	$TabCreate.Controls.Add($TextLastName)
	$TabCreate.Location = '4, 22'
	$TabCreate.Name = 'TabCreate'
	$TabCreate.Padding = '3, 3, 3, 3'
	$TabCreate.Size = '406, 334'
	$TabCreate.TabIndex = 1
	$TabCreate.Text = 'Create User'
	$TabCreate.UseVisualStyleBackColor = $True
	#
	# buttonCreateUser
	#
	$buttonCreateUser.Location = '300, 153'
	$buttonCreateUser.Name = 'buttonCreateUser'
	$buttonCreateUser.Size = '100, 23'
	$buttonCreateUser.TabIndex = 8
	$buttonCreateUser.Text = 'CreateUser'
	$buttonCreateUser.UseCompatibleTextRendering = $True
	$buttonCreateUser.UseVisualStyleBackColor = $True
	$buttonCreateUser.add_Click($buttonCreateUser_Click)
	#
	# LabelLastName
	#
	$LabelLastName.AutoSize = $True
	$LabelLastName.Location = '7, 53'
	$LabelLastName.Name = 'LabelLastName'
	$LabelLastName.Size = '89, 17'
	$LabelLastName.TabIndex = 7
	$LabelLastName.Text = 'Enter Last Name'
	$LabelLastName.UseCompatibleTextRendering = $True
	#
	# labelEnterPassword
	#
	$labelEnterPassword.AutoSize = $True
	$labelEnterPassword.Location = '7, 105'
	$labelEnterPassword.Name = 'labelEnterPassword'
	$labelEnterPassword.Size = '93, 17'
	$labelEnterPassword.TabIndex = 6
	$labelEnterPassword.Text = 'Enter Password : '
	$labelEnterPassword.UseCompatibleTextRendering = $True
	#
	# labelEnterID
	#
	$labelEnterID.AutoSize = $True
	$labelEnterID.Location = '7, 79'
	$labelEnterID.Name = 'labelEnterID'
	$labelEnterID.Size = '52, 17'
	$labelEnterID.TabIndex = 5
	$labelEnterID.Text = 'Enter ID :'
	$labelEnterID.UseCompatibleTextRendering = $True
	#
	# LabelFirstName
	#
	$LabelFirstName.AutoSize = $True
	$LabelFirstName.Location = '7, 27'
	$LabelFirstName.Name = 'LabelFirstName'
	$LabelFirstName.Size = '96, 17'
	$LabelFirstName.TabIndex = 4
	$LabelFirstName.Text = 'Enter First Name :'
	$LabelFirstName.UseCompatibleTextRendering = $True
	#
	# TextID
	#
	$TextID.Location = '300, 79'
	$TextID.Name = 'TextID'
	$TextID.Size = '100, 20'
	$TextID.TabIndex = 3
	#
	# TextFirstName
	#
	$TextFirstName.Location = '300, 27'
	$TextFirstName.Name = 'TextFirstName'
	$TextFirstName.Size = '100, 20'
	$TextFirstName.TabIndex = 2
	#
	# TextPassword
	#
	$TextPassword.Location = '300, 105'
	$TextPassword.Name = 'TextPassword'
	$TextPassword.Size = '100, 20'
	$TextPassword.TabIndex = 1
	#
	# TextLastName
	#
	$TextLastName.Location = '300, 53'
	$TextLastName.Name = 'TextLastName'
	$TextLastName.Size = '100, 20'
	$TextLastName.TabIndex = 0
	#
	# UserName
	#
	$UserName.HeaderText = 'User Name'
	$UserName.Name = 'UserName'
	$UserName.ReadOnly = $True
	#
	# UPN
	#
	$UPN.AutoSizeMode = 'AllCells'
	$UPN.HeaderText = 'UPN'
	$UPN.Name = 'UPN'
	$UPN.ReadOnly = $True
	$UPN.Width = 55
	$TabCreate.ResumeLayout()
	$tabpage1.ResumeLayout()
	$TabSearch.ResumeLayout()
	$form1.ResumeLayout()
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $form1.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$form1.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$form1.add_FormClosed($Form_Cleanup_FormClosed)
	#Show the Form
	return $form1.ShowDialog()

} #End Function

#Call the form
Show-ActiveDirectoryGUI_psf | Out-Null
