#------------------------------------------------------------------------
# Source File Information (DO NOT MODIFY)
# Source ID: c6bea00f-7aa7-4512-86e9-1343e77da80c
# Source File: UnlockUser.psf
#------------------------------------------------------------------------
#region File Recovery Data (DO NOT MODIFY)
<#RecoveryData:
NQQAAB+LCAAAAAAABABllMmOo0gQhu+W/A6lviI1q7GRqktK1rKxWWwwmFuaPdlMsvP046m5jNRx
CoX+kELxxR+f1zhsxhgvMuzhxzvp8qb+84v9Tf/62m4+Pj5NnKd5DUs1L2MDVvGXW5dNWLhdjH+/
uuST/Evw06Y2uPqCzBTSgsjHgANAMmUJ/BcikI07TY8MAm4SEBTJyKVp6zcFcUUuO81QQuTRbhPz
S7g7B4UpB0st+gzPxs52M4FUVdvo1qbF69blwpiRNWFl1cFg99KT19nHIZHEupCpa39HgHq9+ocd
OZySnMB4uRn6oiFSa28uL1y2m0saBhl3tBiO9ghknUxNaQtHLgopO1VuPSgNoZJl8lgv9o0wZBy1
NTJnBieCpt1bYVQUDiFrUXi60LabwzXMpMWBmmeJ5dXuDHykLpGy1++PlPae+CCV18fwcsRXlIny
bICC2p+wMogdE8GgxthGINQPk9vW1nZTHX1AO84B2TsGM9RtYMy7WbNyS6jVK/DhWkk9Vc5FpK08
cU00tn8ZImAYuPKVwBmVUAe1l+5rXVX192xGIwrP4yTvplNCFqN/POwvV4W4B7nM3bGAi4JnoanV
Zk9dINRcblfRlDIhqlxB/t2yCQD0kOePHZttN23Anu1pRsq/kI9vyHVnacqgkUY5BetRHG9+9Qhm
2yjdp5hb7fkQS5JfxyOV4p2c5JEhizOxkHdybrebXeo4L7qHC5V3kIifE0IPEBQz96APPK8SkTrC
SBo0WodPOjzmz4BK4/2ORrmXXVLO4VMNf9uedy3K/ftC8lEu9HKh85MxZhE1Fc8wOgcT6nux6DEw
4zprsL+SxLnizUFJELyX8MjfF/7VlEKhXWY51qvokipvprfDMM4ZdPvcyWlKmgUrhdMQqRFC9Yls
zVuGo9UIX6KiO9oy+/1KP+Nw8Fso+FliT5Pfc2BYHJnt3xSe397owQVVV7jg/dqiAbO9n7hyYfWr
d2M7e/BcitIcamZKWAu4tyxVR5TKEHGSAXnhOY407YyfZ2K7ieSzfnWpfUkKLXGp1nNGE3JGtDBu
9nkY4MhB6y7QzrzFvbcWWk1vFuZqEeqpXQeOjSzhFBJzxMkpAJ/kj2l/7Au6Lq6eZR53H+S78kn+
/018/QNZUQh5NQQAAA==#>
#endregion

<#
    .NOTES
    --------------------------------------------------------------------------------
     Code generated by:  SAPIEN Technologies, Inc., PowerShell Studio 2020 v5.7.172
     Generated on:       7/25/2020 3:54 PM
     Generated by:       Administrator
    --------------------------------------------------------------------------------
    .DESCRIPTION
        GUI script generated by PowerShell Studio 2020
#>


#----------------------------------------------
#region Application Functions
#----------------------------------------------

#endregion Application Functions

#----------------------------------------------
# Generated Form Function
#----------------------------------------------
function Show-UnlockUser_psf {

	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	#endregion Import Assemblies

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$form1 = New-Object 'System.Windows.Forms.Form'
	$buttonUnlock = New-Object 'System.Windows.Forms.Button'
	$textUserName = New-Object 'System.Windows.Forms.TextBox'
	$labelUsername = New-Object 'System.Windows.Forms.Label'
	$dataUser = New-Object 'System.Windows.Forms.DataGridView'
	$buttonSearch = New-Object 'System.Windows.Forms.Button'
	$UserName = New-Object 'System.Windows.Forms.DataGridViewTextBoxColumn'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	
	$form1_Load={
		#TODO: Initialize Form Controls here
		
	}
	
	#region Control Helper Functions
	function Update-DataGridView
	{
		<#
		.SYNOPSIS
			This functions helps you load items into a DataGridView.
	
		.DESCRIPTION
			Use this function to dynamically load items into the DataGridView control.
	
		.PARAMETER  DataGridView
			The DataGridView control you want to add items to.
	
		.PARAMETER  Item
			The object or objects you wish to load into the DataGridView's items collection.
		
		.PARAMETER  DataMember
			Sets the name of the list or table in the data source for which the DataGridView is displaying data.
	
		.PARAMETER AutoSizeColumns
		    Resizes DataGridView control's columns after loading the items.
		#>
		Param (
			[ValidateNotNull()]
			[Parameter(Mandatory=$true)]
			[System.Windows.Forms.DataGridView]$DataGridView,
			[ValidateNotNull()]
			[Parameter(Mandatory=$true)]
			$Item,
		    [Parameter(Mandatory=$false)]
			[string]$DataMember,
			[System.Windows.Forms.DataGridViewAutoSizeColumnsMode]$AutoSizeColumns = 'None'
		)
		$DataGridView.SuspendLayout()
		$DataGridView.DataMember = $DataMember
		
		if ($null -eq $Item)
		{
			$DataGridView.DataSource = $null
		}
		elseif ($Item -is [System.Data.DataSet] -and $Item.Tables.Count -gt 0)
		{
			$DataGridView.DataSource = $Item.Tables[0]
		}
		elseif ($Item -is [System.ComponentModel.IListSource]`
		-or $Item -is [System.ComponentModel.IBindingList] -or $Item -is [System.ComponentModel.IBindingListView] )
		{
			$DataGridView.DataSource = $Item
		}
		else
		{
			$array = New-Object System.Collections.ArrayList
			
			if ($Item -is [System.Collections.IList])
			{
				$array.AddRange($Item)
			}
			else
			{
				$array.Add($Item)
			}
			$DataGridView.DataSource = $array
		}
		
		if ($AutoSizeColumns -ne 'None')
		{
			$DataGridView.AutoResizeColumns($AutoSizeColumns)
		}
		
		$DataGridView.ResumeLayout()
	}
	
	function ConvertTo-DataTable
	{
		<#
			.SYNOPSIS
				Converts objects into a DataTable.
		
			.DESCRIPTION
				Converts objects into a DataTable, which are used for DataBinding.
		
			.PARAMETER  InputObject
				The input to convert into a DataTable.
		
			.PARAMETER  Table
				The DataTable you wish to load the input into.
		
			.PARAMETER RetainColumns
				This switch tells the function to keep the DataTable's existing columns.
			
			.PARAMETER FilterWMIProperties
				This switch removes WMI properties that start with an underline.
		
			.EXAMPLE
				$DataTable = ConvertTo-DataTable -InputObject (Get-Process)
		#>
		[OutputType([System.Data.DataTable])]
		param(
		$InputObject, 
		[ValidateNotNull()]
		[System.Data.DataTable]$Table,
		[switch]$RetainColumns,
		[switch]$FilterWMIProperties)
		
		if($null -eq $Table)
		{
			$Table = New-Object System.Data.DataTable
		}
		
		if ($null -eq $InputObject)
		{
			$Table.Clear()
			return @( ,$Table)
		}
		
		if ($InputObject -is [System.Data.DataTable])
		{
			$Table = $InputObject
		}
		elseif ($InputObject -is [System.Data.DataSet] -and $InputObject.Tables.Count -gt 0)
		{
			$Table = $InputObject.Tables[0]
		}
		else
		{
			if (-not $RetainColumns -or $Table.Columns.Count -eq 0)
			{
				#Clear out the Table Contents
				$Table.Clear()
				
				if ($null -eq $InputObject) { return } #Empty Data
				
				$object = $null
				#find the first non null value
				foreach ($item in $InputObject)
				{
					if ($null -ne $item)
					{
						$object = $item
						break
					}
				}
				
				if ($null -eq $object) { return } #All null then empty
				
				#Get all the properties in order to create the columns
				foreach ($prop in $object.PSObject.Get_Properties())
				{
					if (-not $FilterWMIProperties -or -not $prop.Name.StartsWith('__')) #filter out WMI properties
					{
						#Get the type from the Definition string
						$type = $null
						
						if ($null -ne $prop.Value)
						{
							try { $type = $prop.Value.GetType() }
							catch { Out-Null }
						}
						
						if ($null -ne $type) # -and [System.Type]::GetTypeCode($type) -ne 'Object')
						{
							[void]$table.Columns.Add($prop.Name, $type)
						}
						else #Type info not found
						{
							[void]$table.Columns.Add($prop.Name)
						}
					}
				}
				
				if ($object -is [System.Data.DataRow])
				{
					foreach ($item in $InputObject)
					{
						$Table.Rows.Add($item)
					}
					return @( ,$Table)
				}
			}
			else
			{
				$Table.Rows.Clear()
			}
			
			foreach ($item in $InputObject)
			{
				$row = $table.NewRow()
				
				if ($item)
				{
					foreach ($prop in $item.PSObject.Get_Properties())
					{
						if ($table.Columns.Contains($prop.Name))
						{
							$row.Item($prop.Name) = $prop.Value
						}
					}
				}
				[void]$table.Rows.Add($row)
			}
		}
		
		return @(,$Table)
	}
	#endregion
	
	$buttonSearch_Click = {
		$dataUser.Rows.Clear()
		$Users = Search-ADAccount -LockedOut
		$Users | ForEach-Object {
			$dataUser.Rows.Add($_.SamAccountName)
		}
		
		
		
	}
	
	$buttonUnlock_Click={
		#TODO: Place custom script here
		$textUserName = $textUserName.Text
		Unlock-ADAccount -Identity $textUserName -Verbose
	}
	
	# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$form1.WindowState = $InitialFormWindowState
	}
	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$buttonUnlock.remove_Click($buttonUnlock_Click)
			$buttonSearch.remove_Click($buttonSearch_Click)
			$form1.remove_Load($form1_Load)
			$form1.remove_Load($Form_StateCorrection_Load)
			$form1.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch { Out-Null <# Prevent PSScriptAnalyzer warning #> }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$form1.SuspendLayout()
	#
	# form1
	#
	$form1.Controls.Add($buttonUnlock)
	$form1.Controls.Add($textUserName)
	$form1.Controls.Add($labelUsername)
	$form1.Controls.Add($dataUser)
	$form1.Controls.Add($buttonSearch)
	$form1.AutoScaleDimensions = '6, 13'
	$form1.AutoScaleMode = 'Font'
	$form1.ClientSize = '284, 261'
	$form1.Name = 'form1'
	$form1.Text = 'Form'
	$form1.add_Load($form1_Load)
	#
	# buttonUnlock
	#
	$buttonUnlock.Location = '197, 67'
	$buttonUnlock.Name = 'buttonUnlock'
	$buttonUnlock.Size = '75, 23'
	$buttonUnlock.TabIndex = 7
	$buttonUnlock.Text = 'Unlock'
	$buttonUnlock.UseCompatibleTextRendering = $True
	$buttonUnlock.UseVisualStyleBackColor = $True
	$buttonUnlock.add_Click($buttonUnlock_Click)
	#
	# textUserName
	#
	$textUserName.Location = '86, 70'
	$textUserName.Name = 'textUserName'
	$textUserName.Size = '100, 20'
	$textUserName.TabIndex = 6
	#
	# labelUsername
	#
	$labelUsername.AutoSize = $True
	$labelUsername.Location = '12, 73'
	$labelUsername.Name = 'labelUsername'
	$labelUsername.Size = '56, 17'
	$labelUsername.TabIndex = 5
	$labelUsername.Text = 'Username'
	$labelUsername.UseCompatibleTextRendering = $True
	#
	# dataUser
	#
	$dataUser.ColumnHeadersHeightSizeMode = 'AutoSize'
	[void]$dataUser.Columns.Add($UserName)
	$dataUser.Location = '12, 99'
	$dataUser.Name = 'dataUser'
	$dataUser.Size = '240, 150'
	$dataUser.TabIndex = 3
	#
	# buttonSearch
	#
	$buttonSearch.Location = '12, 12'
	$buttonSearch.Name = 'buttonSearch'
	$buttonSearch.Size = '75, 23'
	$buttonSearch.TabIndex = 2
	$buttonSearch.Text = 'Search'
	$buttonSearch.UseCompatibleTextRendering = $True
	$buttonSearch.UseVisualStyleBackColor = $True
	$buttonSearch.add_Click($buttonSearch_Click)
	#
	# UserName
	#
	$UserName.HeaderText = 'User name'
	$UserName.Name = 'UserName'
	$form1.ResumeLayout()
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $form1.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$form1.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$form1.add_FormClosed($Form_Cleanup_FormClosed)
	#Show the Form
	return $form1.ShowDialog()

} #End Function

#Call the form
Show-UnlockUser_psf | Out-Null
